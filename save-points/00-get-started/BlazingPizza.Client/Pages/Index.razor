@page "/"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject OrderState orderState 

<div class="main">
    <ul class="pizza-cards">
        @if(specials != null)
        {
            @foreach(var special in specials)
            {
                <li style="background-image: url('@special.ImageUrl')" @onclick="@(() => orderState.ShowConfigurePizzaDialog(special))">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (orderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in orderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => orderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(orderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@orderState.Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(orderState.Order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if(orderState.ShowingConfigureDialog) {
    <ConfigurePizzaDialog Pizza="orderState.ConfiguringPizza" OnCancel="orderState.CancelConfiguringPizza" OnConfirm="orderState.ConfirmConfiguringPizza" />
}

@code {
    List<PizzaSpecial> specials;


    async Task PlaceOrder()
    {
        var response = await httpClient.PostAsJsonAsync("orders", orderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();

        orderState.ResetOrder();

        navigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    async protected override Task OnInitializedAsync()
    {
        specials = await httpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }
}
